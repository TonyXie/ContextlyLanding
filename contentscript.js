// Generated by CoffeeScript 1.4.0
(function() {
  var LinkedList, addElementToDiv, changeFont, changeTagName, commandList, wrapElement;

  LinkedList = (function() {

    function LinkedList() {}

    (function() {
      return this._head = null;
    });

    LinkedList.prototype.add = function(element, method, details) {
      var current, node;
      node = {
        element: element,
        method: method,
        details: details,
        next: null
      };
      current = this._head || (this._head = node);
      if (this._head !== node) {
        while (current.next) {
          current = current.next;
        }
        current.next = node;
      }
      return this;
    };

    LinkedList.prototype.updateAllElement = function(element, newEle) {
      var current, _results;
      current = this._head;
      _results = [];
      while (current !== null) {
        if (current.element === element) {
          current.element = newEle;
        }
        _results.push(current = current.next);
      }
      return _results;
    };

    LinkedList.prototype.item = function(index) {
      var current, i;
      if (index < 0) {
        return null;
      }
      current = this._head || null;
      i = -1;
      while (current && index > (i += 1)) {
        current = current.next;
      }
      return current && current.data;
    };

    LinkedList.prototype.pop = function() {
      var current, data, prev;
      current = this._head;
      while (current.next !== null) {
        prev = current;
        current = current.next;
      }
      data = current;
      if (prev != null) {
        prev.next = null;
      } else {
        this._head = null;
      }
      return data;
    };

    LinkedList.prototype.remove = function(index) {
      var current, i, previous, _ref;
      if (index < 0) {
        return null;
      }
      current = this._head || null;
      i = -1;
      if (index === 0) {
        this._head = current.next;
      } else {
        while (index > (i += 1)) {
          _ref = [current, current.next], previous = _ref[0], current = _ref[1];
        }
        previous.next = current.next;
      }
      return current && current.data;
    };

    LinkedList.prototype.size = function() {
      var count, current;
      current = this._head;
      count = 0;
      while (current) {
        count += 1;
        current = current.next;
      }
      return count;
    };

    LinkedList.prototype.toArray = function() {
      var current, result;
      result = [];
      current = this._head;
      while (current) {
        result.push(current.data);
        current = current.next;
      }
      return result;
    };

    LinkedList.prototype.toString = function() {
      return this.toArray().toString();
    };

    return LinkedList;

  })();

  commandList = new LinkedList;

  $(document).ready(function() {
    var modalDown;
    $('body').append('\
    <div id="ContextlyFlashesHolder"></div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="draggableFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 200px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Element made draggable</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="changeFontFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 200px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Font changed</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="wrapClassFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 230px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Element wrapped in specified div</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="addToClassFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 230px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Element added to specified div</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="changeTagNameFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 200px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Element\'s tagName changed</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="modifyClassFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 200px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Class changed</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="resizableFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 200px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Element made resizable</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="revertFlash" class="hide alert alert-success" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 200px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>Change reverted</p>\
    </div>\
    ');
    $('#ContextlyFlashesHolder').prepend('\
     <div id="failRevertFlash" class="hide alert alert-error" style="\
    z-index: 10000000;\
    position: fixed;\
    left: 41%;\
    top: 2%;\
    width: 200px;\
      ">\
      <a class="close" id= "closeMyFlash" href="#">×</a>\
      <p>No changes to revert</p>\
    </div>\
    ');
    $('body').append('\
    <div id="ContextlyModalsHolder"></div>\
    ');
    $('#ContextlyModalsHolder').append('\
      <!-- Modal -->\
      <div id="fontModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
        <div class="modal-header">\
          <h3 id="myModalLabel">Change font</h3>\
        </div>\
        <div class="modal-body">\
          <select name="font-list" id="font-list">\
            <option value="Helvetica">Helvetica</option>\
            <option value="Raleway">Raleway</option>\
            <option value="Gabriela"> Gabriela </option>\
            <option value="Abril+Fatface">Abril Fatface</option>\
            <option value="Gentium+Book+Basic">Gentium Book Basic</option>\
            <option value="Gravitas+One">Gravitas One</option>\
            <option value="Lato">Lato</option>\
            <option value="Merriweather">Merriweather</option>\
            <option value="Old+Standard+TT">Old Standard TT</option>\
            <option value="Open+Sans">Open Sans</option>\
            <option value="Oswald">Oswald</option>\
            <option value="Playfair+Display">Playfair Display</option>\
            <option value="PT+Sans">PT Sans</option>\
            <option value="PT+Mono">PT Mono</option>\
            <option value="PT+Sans+Narrow">PT Sans Narrow</option>\
            <option value="PT+Serif">PT Serif</option>\
            <option value="Vollkorn">Vollkorn</option>\
            <option value="Abel">Abel</option>\
          </select>\
        <textarea name="Tony" id="changeFontSize" style="width: 280px"cols="1" rows="1">Current font size:</textarea>\
        <textarea name="Tony" id="changeFontStyle" style="width: 280px"cols="1" rows="1">Current font-style:</textarea>\
        <textarea name="Tony" id="changeFontWeight" style="width: 280px"cols="1" rows="1">Current font-weight:</textarea>\
        <b style="font-size: 20px">R</b><input style="width: 50px" id="fontColorR">\
        <b style="font-size: 20px">G</b><input style="width: 50px" id="fontColorG">\
        <b style="font-size: 20px">B</b><input style="width: 50px" id="fontColorB">\
        </div>\
        <div class="modal-footer">\
          <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
          <button id="fontChange" class="btn btn-primary" data-dismiss="modal">Save changes</button>\
        </div>\
      </div>  \
    ');
    $('#ContextlyModalsHolder').append('\
      <!-- Modal -->\
      <div id="helpModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
        <div class="modal-header">\
          <h3 id="myModalLabel">Help Menu</h3>\
        </div>\
        <div class="modal-body">\
          <p> Click elements to select them! Contextly only works on localhost or file:/// urls </p>\
          <p>Help menu: Shift + H</p>\
          <p>Change font-styles: Shift + F</p>\
          <p>Wrap element with class: Shift + W</p>\
          <p>Change tagName: Shift + T</p>\
          <p>Make element draggable: Shift + D</p>\
          <p>Make class draggable: Shift + E</p>\
          <p>Add element to existing div: Shift + A</p>\
          <p>Choose element to make resizable: Shift + R</p>\
          <p>Modify existing class: Shift + M</p>\
          <p>Undo last change: Shift + Z</p>\
        </div>\
        <div class="modal-footer">\
          <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
        </div>\
      </div>  \
    ');
    $('#ContextlyModalsHolder').append('\
      <!-- Modal -->\
      <div id="wrapElementModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
        <div class="modal-header">\
          <h3 id="myModalLabel">Wrap Element Menu</h3>\
        </div>\
        <div class="modal-body">\
          <b style="font-size: 50px">.</b><textarea name="Tony" id="wrapElememtArea" cols="1" rows="1">Wrap element class:</textarea>\
        </div>\
        <div class="modal-footer">\
          <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
          <button id="wrapElement" class="btn btn-primary" data-dismiss="modal" >Save changes</button>\
        </div>\
      </div>  \
    ');
    $('#ContextlyModalsHolder').append('\
    <!-- Modal -->\
    <div id="makeClassDraggable" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
      <div class="modal-header">\
        <h3 id="myModalLabel">Make class draggable</h3>\
      </div>\
      <div class="modal-body">\
        <b style="font-size: 50px">.</b><textarea name="Tony" id="draggableClassArea" cols="1" rows="1">Make class draggable:</textarea>\
        <b style="font-size: 30px">#</b><textarea name="Tony" id="draggableIdArea" cols="1" rows="1">Choose id to add element to:</textarea>\
      </div>\
      <div class="modal-footer">\
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
        <button id="makeClassDraggableSubmit" class="btn btn-primary" data-dismiss="modal" >Save changes</button>\
      </div>\
    </div>  \
  ');
    $('#ContextlyModalsHolder').append('\
      <!-- Modal -->\
      <div id="changeTagNameModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
        <div class="modal-header">\
          <h3 id="myModalLabel">Change tagName</h3>\
        </div>\
        <div class="modal-body">\
          <textarea name="Tony" id="changeTagNameArea" cols="1" rows="1">change tagName to:</textarea>\
        </div>\
        <div class="modal-footer">\
          <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
          <button id="changeTagNameSubmit" class="btn btn-primary" data-dismiss="modal" >Save changes</button>\
        </div>\
      </div>  \
    ');
    $('#ContextlyModalsHolder').append('\
      <!-- Modal -->\
      <div id="addElementToDivModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
        <div class="modal-header">\
          <h3 id="myModalLabel">Add Element to Existing Div</h3>\
        </div>\
        <div class="modal-body">\
          <b style="font-size: 50px">.</b><textarea name="Tony" id="addElementToDivArea" cols="1" rows="1">Choose class to add element to:</textarea>\
          <b style="font-size: 30px">#</b><textarea name="Tony" id="addElementToIdArea" cols="1" rows="1">Choose id to add element to:</textarea>\
        </div>\
        <div class="modal-footer">\
          <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
          <button id="addElementToDiv" class="btn btn-primary" data-dismiss="modal" >Save changes</button>\
        </div>\
      </div>  \
    ');
    $('#ContextlyModalsHolder').append('\
      <!-- Modal -->\
      <div id="resizableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
        <div class="modal-header">\
          <h3 id="myModalLabel">Make Div Resizable</h3>\
        </div>\
        <div class="modal-body">\
          <b style="font-size: 50px">.</b><textarea name="Tony" id="resizableClassArea" cols="1" rows="1">Choose class to make resizable:</textarea>\
          <b style="font-size: 30px">#</b><textarea name="Tony" id="resizableIdDivArea" cols="1" rows="1">Choose id to add element to:</textarea>\
        </div>\
        <div class="modal-footer">\
          <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
          <button id="makeResizable" class="btn btn-primary" data-dismiss="modal" >Save changes</button>\
        </div>\
      </div>  \
    ');
    $('#ContextlyModalsHolder').append('\
      <!-- Modal -->\
      <div id="modifyClassModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\
        <div class="modal-header">\
          <h3 id="myModalLabel">Change class things</h3>\
        </div>\
        <div class="modal-body">\
          <b style="font-size: 50px">.</b><textarea name="Tony" id="modifyClassArea" cols="1" rows="1">Choose class</textarea>\
            <textarea name="Tony" id="modifyClassBackgroundColor" cols="1" rows="1">Background color?</textarea>\
            <textarea name="Tony" id="modifyClassAreaHeight" cols="1" rows="1">Height</textarea>\
            <textarea name="Tony" id="modifyClassAreaWidth" cols="1" rows="1">Width</textarea>\
        </div>\
        <div class="modal-footer">\
          <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
          <button id="modifyClass" class="btn btn-primary" data-dismiss="modal" >Save changes</button>\
        </div>\
      </div>  \
    ');
    modalDown = false;
    $(document).bind('keypress', function(e) {
      var action, classToAdd, classToAddLastChild, color, content, currFontSize, currTagName, details, element, fontStyle, fontWeight, index, method, parent, tagName;
      if (event.shiftKey && event.which === 72) {
        $("#helpModal").modal();
      }
      if (event.shiftKey && event.which === 70) {
        fontStyle = $('.clicked').css('font-style');
        fontWeight = $('.clicked').css('font-weight');
        $('#changeFontStyle').val(fontStyle);
        $('#changeFontWeight').val(fontWeight);
        color = $('.clicked').css("color");
        $('#fontColorR').val(color.substring(4, 6));
        $('#fontColorG').val(color.substring(8, 10));
        $('#fontColorB').val(color.substring(12, 14));
        currFontSize = $('.clicked').css('font-size');
        $("#changeFontSize").val(currFontSize);
        $("#fontModal").modal();
      }
      if (event.shiftKey && event.which === 87) {
        $('#wrapElementModal').modal();
      }
      if (event.shiftKey && event.which === 84) {
        currTagName = $('.clicked').prop('tagName').toLowerCase();
        $('#changeTagNameArea').val(currTagName);
        $("#changeTagNameModal").modal();
      }
      if (event.shiftKey && event.which === 69) {
        $("#makeClassDraggable").modal();
      }
      if (event.shiftKey && event.which === 68) {
        $('#draggableFlash').fadeIn(1500, function() {
          return $(this).fadeOut();
        });
        $('.clicked').draggable({
          grid: [20, 20],
          disabled: false,
          stop: function() {
            var left, top;
            $(this).tooltip('destroy');
            left = $(this).css('left');
            top = $(this).css('top');
            $(this).tooltip({
              'trigger': 'manual',
              'title': "left-change: " + left + ", top-change: " + top
            }).tooltip('show');
            return $(this).draggable('disable');
          },
          opacity: 1
        });
        commandList.add($('.clicked'), 'draggable');
      }
      if (event.shiftKey && event.which === 65) {
        $('#addElementToDivModal').modal();
      }
      if (event.shiftKey && event.which === 82) {
        $('#resizableModal').modal();
      }
      if (event.shiftKey && event.which === 77) {
        $("#modifyClassModal").modal();
      }
      if (event.shiftKey && event.which === 90) {
        if (commandList.size() > 0) {
          $('#revertFlash').fadeIn(1500, function() {
            return $(this).fadeOut();
          });
          action = commandList.pop();
          element = action.element;
          method = action.method;
          details = action.details;
          if (method === "tagName") {
            tagName = details.tagName;
            content = $('.changeTagNameTarget').text();
            return $('.changeTagNameTarget').replaceWith(function() {
              return $("<" + tagName + " class = 'changeTagNameTarget'></" + tagName + ">").append(content);
            });
          } else if (method === "modifyClass") {
            $(element).css('background', details.background);
            $(element).css('height', details.height);
            return $(element).css('width', details.width);
          } else if (method === "wrapClass") {
            return $(element).unwrap();
          } else if (method === "addElementToDiv") {
            classToAdd = details.classToAdd;
            index = details.index;
            parent = details.parent;
            classToAddLastChild = "" + classToAdd + ":last-child";
            $(classToAddLastChild).remove();
            return $(parent).append($(element));
          } else if (method === "changeFont") {
            $(element).css("font-size", details.fontSize);
            $(element).css("font-family", details.fontFamily);
            $(element).css("color", details.color);
            $(element).css("font-style", details.fontStyle);
            return $(element).css("font-weight", details.fontWeight);
          } else if (method === "resizable") {
            $(element).animate({
              "height": "" + details.height,
              "width": "" + details.width
            });
            return $(element).tooltip('destroy');
          } else if (method === "draggable" || "classDraggable") {
            $(element).animate({
              "top": "0px",
              "left": "0px"
            });
            return $(element).tooltip('destroy');
          }
        } else {
          return $('#failRevertFlash').fadeIn(1500, function() {
            return $(this).fadeOut();
          });
        }
      }
    });
    $('body').on('click', "#fontChange", function(e) {
      var color, colorB, colorG, colorR, font, fontSize, fontStyle, fontWeight;
      font = $('#font-list').val();
      fontSize = $('#changeFontSize').val();
      fontStyle = $('#changeFontStyle').val();
      fontWeight = $('#changeFontWeight').val();
      colorR = $("#fontColorR").val();
      colorG = $("#fontColorG").val();
      colorB = $("#fontColorB").val();
      color = "rgb(" + colorR + ", " + colorG + ", " + colorB + ")";
      commandList.add($('.clicked'), "changeFont", {
        "fontFamily": $('.clicked').css("font-family"),
        "fontSize": $('.clicked').css("font-size"),
        "fontStyle": $('.clicked').css("font-style"),
        "fontWeight": $('.clicked').css('font-weight'),
        "color": $('.clicked').css("color")
      });
      changeFont(font, fontSize, color, fontStyle, fontWeight);
      return $("#changeFontFlash").fadeIn(1500, function() {
        return $(this).fadeOut();
      });
    });
    $('body').on('click', "#wrapElement", function(e) {
      var classToWrap;
      classToWrap = $('#wrapElememtArea').val();
      wrapElement(classToWrap);
      $('#wrapClassFlash').fadeIn(1500, function() {
        return $(this).fadeOut();
      });
      return commandList.add($('.clicked'), "wrapClass");
    });
    $('body').on('click', "#changeTagNameSubmit", function(e) {
      var tagName;
      tagName = $('#changeTagNameArea').val();
      commandList.add($('.clicked'), 'tagName', {
        "tagName": $('.clicked').prop('tagName').toLowerCase()
      });
      changeTagName(tagName);
      return $('#changeTagNameFlash').fadeIn(1500, function() {
        return $(this).fadeOut();
      });
    });
    $('body').on('click', '#closeMyFlash', function(e) {
      return $(this).fadeOut();
    });
    $('body').on('click', '#addElementToDiv', function(e) {
      var IdToAdd, classToAdd, myClass, parent;
      classToAdd = $('#addElementToDivArea').val();
      IdToAdd = $('#addElementToIdArea').val();
      if (classToAdd !== "Choose class to add element to:") {
        myClass = "." + classToAdd;
      } else {
        myClass = "#" + IdToAdd;
      }
      parent = $('.clicked').parent();
      commandList.add($('.clicked'), 'addElementToDiv', {
        "classToAdd": myClass,
        "index": $('*').index($('.clicked')),
        "parent": parent
      });
      $('#addElementToDivArea').val("Choose class to add element to:");
      $('#addElementToIdArea').val("Choose id to add element to:");
      addElementToDiv(myClass);
      return $('#addToClassFlash').fadeIn(1500, function() {
        return $(this).fadeOut();
      });
    });
    $('body').on('click', '#makeResizable', function(e) {
      var classElement, idElement, myResizableClass;
      classElement = $('#resizableClassArea').val();
      idElement = $('#resizableIdDivArea').val();
      if (classElement !== "Choose class to make resizable:") {
        myResizableClass = "." + classElement;
        $('#resizableClassArea').val("Choose class to make resizable:");
      } else {
        myResizableClass = "#" + idElement;
        $('#resizableIdDivArea').val("Choose id to add element to:");
      }
      $(myResizableClass).resizable({
        start: function() {
          return commandList.add($(myResizableClass), "resizable", {
            "height": $(myResizableClass).css("height"),
            "width": $(myResizableClass).css("width")
          });
        },
        stop: function() {
          var height, width;
          $(this).tooltip('destroy');
          height = $(myResizableClass).css('height');
          width = $(myResizableClass).css('width');
          return $(myResizableClass).tooltip({
            placement: 'bottom',
            trigger: 'manual',
            title: "new height: " + height + ", new width: " + width
          }).tooltip('show');
        }
      });
      $(myResizableClass).css("border-bottom", "3px solid black");
      $(myResizableClass).css("border-right", "3px solid black");
      return $('#resizableFlash').fadeIn(1500, function() {
        return $(this).fadeOut();
      });
    });
    $('body').on('click', '#makeClassDraggableSubmit', function(e) {
      var classElement, idElement, myClass;
      classElement = $('#draggableClassArea').val();
      idElement = $('#draggableIdArea').val();
      if (classElement !== "Make class draggable:") {
        myClass = "." + classElement;
        $('#draggableClassArea').val("Make class draggable:");
      } else {
        myClass = "#" + idElement;
        $('#draggableIdArea').val("Choose id to add element to:");
      }
      $(myClass).draggable({
        grid: [20, 20],
        disabled: false,
        stop: function() {
          var left, top;
          $(this).tooltip('destroy');
          left = $(this).css('left');
          top = $(this).css('top');
          $(this).tooltip({
            'trigger': 'manual',
            'title': "left-change: " + left + ", top-change: " + top
          }).tooltip('show');
          return $(this).draggable('disable');
        },
        opacity: 1
      });
      $('#draggableFlash').fadeIn(1500, function() {
        return $(this).fadeOut();
      });
      return commandList.add($(myClass), "classDraggable");
    });
    $('body').on('click', "#modifyClass", function(e) {
      var background, element, height, width;
      element = "." + $('#modifyClassArea').val();
      background = $('#modifyClassBackgroundColor').val();
      height = $('#modifyClassAreaHeight').val();
      width = $('#modifyClassAreaWidth').val();
      commandList.add(element, 'modifyClass', {
        "background": $(element).css("background"),
        "height": $(element).css('height'),
        "width": $(element).css('width')
      });
      $(element).css('background', background);
      $(element).css('height', height);
      $(element).css('width', width);
      return $('#modifyClassFlash').fadeIn(1500, function() {
        return $(this).fadeOut();
      });
    });
    return $('body').on("click", "h1, h2, h3, p, a, li, img", function(e) {
      var x;
      e.preventDefault();
      x = $(this);
      $('.clicked').css('background-color', '');
      $('.clicked').removeClass('clicked');
      x.addClass('clicked');
      return x.css('background', 'rgb(255, 251, 204)');
    });
  });

  changeFont = function(font, fontSize, color, fontStyle, fontWeight) {
    var element;
    font = font;
    element = $('.clicked');
    fontSize = fontSize;
    color = color;
    if (font !== "Helvetica") {
      $("head").append("      <link href='http://fonts.googleapis.com/css?family=" + font + "' rel='stylesheet' type='text/css'>      ");
      font = font.split("+").join(" ");
    }
    element.css('font-family', font);
    element.css('font-size', fontSize);
    element.css('color', color);
    element.css('font-style', fontStyle);
    return element.css('font-weight', fontWeight);
  };

  wrapElement = function(wrapElement) {
    return $('.clicked').wrap('<div class=' + '"' + wrapElement + '"' + ' />');
  };

  changeTagName = function(tagName) {
    var color, element, fontFamily, target;
    if (tagName != null) {
      element = $('.clicked');
      color = $(element).css('color');
      fontFamily = $(element).css('font-family');
      $('.clicked').replaceWith(function() {
        return $("<" + tagName + " class = 'changeTagNameTarget'></" + tagName + ">").append($('.clicked').contents());
      });
      target = $('.changeTagNameTarget');
      $(target).css('color', color);
      $(target).css('font-family', fontFamily);
      return commandList.updateAllElement(element, $('.changeTagNameTarget'));
    }
  };

  addElementToDiv = function(classToAdd) {
    var element;
    if (classToAdd != null) {
      element = $('.clicked');
      return $(classToAdd).append(element);
    }
  };

}).call(this);
